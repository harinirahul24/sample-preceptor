<?php

/**
 * @file
 * Contains srcm_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\srcm_custom\Http\CustomGuzzleHttp;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\rules\Event\EntityEvent;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;

/**
 * Implements hook_help().
 */
function srcm_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the srcm_custom module.
    case 'help.page.srcm_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Srcm Custom') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_entity_view().
 */
function srcm_custom_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    if ($entity_type_id == 'node') {
      if ($matched_role = entity_type_role_matcher($entity->bundle())) {
        $current_user = \Drupal::currentUser();
        if (!$current_user->isAnonymous()) {
          $roles = $current_user->getRoles();
          if (array_search($matched_role,$roles) || array_search("administrator",$roles) || array_search("content_writer",$roles)) {

          } else {
            throw new AccessDeniedHttpException();
          }
        }
      } 
    }
    if ($entity_type_id == 'taxonomy_term') {
      if ($matched_role = entity_type_role_matcher($entity->bundle())) {
        $current_user = \Drupal::currentUser();
        if (!$current_user->isAnonymous()) {
          $roles = $current_user->getRoles();
          if (array_search($matched_role,$roles) || array_search("administrator",$roles) || array_search("content_writer",$roles)) {

          } else {
            throw new AccessDeniedHttpException();
          }
        }
      } 
    }
  }
}

function srcm_custom_allowed_country_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $country_options = array();
  $country_options['_none'] = '- None -';
  $countries_config = \Drupal::config('srcm_custom.siteconfigurables')->get('countries');
  $countries_array = json_decode($countries_config,true);
  foreach ($countries_array as $country_id => $country_name) {
    $country_options[$country_id] = $country_name;
  }
  return $country_options;  
}

function srcm_custom_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if ($form_id == 'node_news_and_articles_form' || $form_id == 'node_news_and_articles_edit_form') {
     $form['#attached']['library'][] = 'srcm_custom/state_city_filter';
     $form['field_state_and_centre']['#suffix'] = '<div id="state-select-list-on-country"></div><div id="centre-select-list-on-state"></div>';
  }
  if ($form_id == 'user_login_form') {
    $host = \Drupal::request()->getSchemeAndHttpHost();
    $config = \Drupal::config('srcm_custom.oauth2endpoint');
    $endpoint = $config->get('oauth2_end_point_url');
    $client_id = $config->get('oauth2_client_id');
    $form['#prefix'] = '<div class="container"><div class="row justify-content-center align-items-center"><div class="srcm_login_url text-center col-md-12"><p><a href="'.$endpoint.'/o/authorize?state=test&response_type=code&client_id='.$client_id.'&redirect_uri='.$host.'/openid-connect/generic"><img src="//cdn-prod.heartfulness.org/hfni/images/hfn-icon.svg" width="100"><br>
SRCM Login</a></p></div><div class="col-md-12">';
    $form['#suffix'] = '</div></div></div>';
  }
}

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 */
function srcm_custom_cron() {
  $countries_list = array();
  $check = new CustomGuzzleHttp();
  $response = $check->performRequest('https://profile.sahajmarg.org/api/v2/countries/?page_size=200&page=1');
  $page_size = 200;
  $no_of_pages = ceil($response['count']/$page_size);
  for($i=1;$i<=$no_of_pages;$i++) {
    if ($i==1) {
      foreach ($response['results'] as $result){
        $countries_list[$result['id']] = $result['name'];
      }
    } else {
      $check = new CustomGuzzleHttp();
      $response = $check->performRequest('https://profile.sahajmarg.org/api/v2/countries/?page_size=200&page='.$i); 
      foreach ($response['results'] as $result){
        $countries_list[$result['id']] = $result['name'];
      }
    }
  }
  $country_json =json_encode($countries_list);
  \Drupal::service('config.factory')->getEditable('srcm_custom.siteconfigurables')->set('countries',$country_json)->save();
}

/**
 * Utility function to get the list of all the terms for preceptors.
 */
function srcm_custom_get_preceptor_terms($node, $tax_term) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (!$tax_term) {
    $terms_on_node = $node->get('field_type_of_preceptor_page')->getValue();
  }
  $url = srcm_custom_custom_home_url();
  if ($url == 'default') {
    $url = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
  } 
  $breadcrumb = array();
  $breadcrumb['Home'] = $url;
  $breadcrumb_array = array();
  $breadcrumb_array['child'] = '';
  $breadcrumb_array['parent'] = '';
  $parent_term_to_be_active = '';
  $all_terms_zero_depth = array();
  $children = array();
  $parents_weights = array();
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree("type_of_preceptor_page", 0, NULL, TRUE);
  foreach($terms as $term_un_tranlated) {
    $term = \Drupal::service('entity.repository')->getTranslationFromContext($term_un_tranlated, $language);
    $is_active_class = '';
    if (!$tax_term) {
      if (in_array($term->get('tid')->value, array_column($terms_on_node,'target_id'))) {
        $is_active_class = 'is_active active';
      }
    } else {
      if ($tax_term->id() == $term->get('tid')->value) {
        $is_active_class = 'is_active active';
      }
    }
    if ($term->depth == 0) {
      $image_url = '';
      $target_id = $term->get('field_background_image')->getValue()[0]['target_id'];
      if ($target_id) {
        $image_url= File::load($target_id)->url();
      }
      
      $all_terms_zero_depth[$term->get('weight')->value] = array('tid'       => $term->get('tid')->value,
                                                   'name'      => $term->get('name')->value,
                                                   'url'       => $term->url(),
                                                   'is_active' => $is_active_class,
                                                   'weight'    => $term->get('weight')->value,
                                                   'bg_url'    => $image_url,
                                                );
      $parents_weights[$term->get('tid')->value] = $term->get('weight')->value;
      $parents_names_urls[$term->get('tid')->value] = array('url' => $term->url(), 'name' => $term->get('name')->value);
      if ($is_active_class == 'is_active active') {
        $breadcrumb_array['parent'] = array('url' => $term->url(), 'name' => $term->get('name')->value);
      }
    } else {
      $children[$term->parents[0]][$term->get('weight')->value] = array('tid'       => $term->get('tid')->value,
                                                   'name'      => $term->get('name')->value,
                                                   'url'       => $term->url(),
                                                   'is_active' => $is_active_class,
                                                   'weight'    => $term->get('weight')->value,
                                                );
      if ($is_active_class == 'is_active active' && isset($term->parents[0])) {
        $parent_term_to_be_active = $term->parents[0];
        $breadcrumb_array['child'] = array('url' => $term->url(), 'name' => $term->get('name')->value);
      }
    }
  }
  if (!empty($parent_term_to_be_active)) {
    $all_terms_zero_depth[$parents_weights[$parent_term_to_be_active]]['is_active'] = 'is_active active';
    $breadcrumb_array['parent'] = $parents_names_urls[$parent_term_to_be_active];
  }
  if (empty($parent_term_to_be_active)) {
    $return_children = '';
  } else {
    $return_children = $children[$parent_term_to_be_active];
  }
  if (!empty($breadcrumb_array['parent']) && !empty($breadcrumb_array['child'])) {
    if (!$tax_term) {
      $node_title = $node->getTitle();
      $breadcrumb[$breadcrumb_array['parent']['name']] = $breadcrumb_array['parent']['url'];
      $breadcrumb[$breadcrumb_array['child']['name']]  = $breadcrumb_array['child']['url'];
      $breadcrumb[$node_title] = 'no_url';
    } else {
      $breadcrumb[$breadcrumb_array['parent']['name']] = $breadcrumb_array['parent']['url'];
      $breadcrumb[$breadcrumb_array['child']['name']]  = 'no_url';
    }
  }
  if (!empty($breadcrumb_array['parent']) && empty($breadcrumb_array['child'])) {
    if (!$tax_term) {
      $node_title = $node->getTitle();
      $breadcrumb[$breadcrumb_array['parent']['name']] = $breadcrumb_array['parent']['url'];
      $breadcrumb[$node_title] = 'no_url';
    } else {
      $breadcrumb[$breadcrumb_array['parent']['name']] = 'no_url';
    }
  }
  if (!empty($breadcrumb_array['child']) && empty($breadcrumb_array['parent'])) {
    if (!$tax_term) {
      $node_title = $node->getTitle();
      $breadcrumb[$breadcrumb_array['child']['name']] = $breadcrumb_array['child']['url'];
      $breadcrumb[$node_title] = 'no_url';
    } else {
      $breadcrumb[$breadcrumb_array['child']['name']] = 'no_url';
    }
  }
  return array('children' => $return_children, 'parents' => $all_terms_zero_depth, 'breadcrumb' => $breadcrumb);
}



/**
 * Utility function to return the home page URL
 * based on the user logged in
 */
function srcm_custom_custom_home_url() {
  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  if (!empty($roles)) {
    if (in_array('preceptor',$roles) && in_array('abhyasi',$roles)) {
      $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $query = db_select('node__field_roles', 'fr');
      $query->fields('fr',['entity_id']);
      $query->condition('fr.bundle', 'home_pages');
      $query->condition('fr.field_roles_target_id', 'preceptor');
      $query->condition('fr.langcode', $language);
      $nid = $query->execute()->fetchField();
      $url = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
      return $url;
    } else {
      return 'default';
    }
  } else {
    $account = \Drupal::currentUser();
    $roles = $account->getRoles();
    if (!$account->isAnonymous()) {
      if (in_array('preceptor',$roles) && in_array('abhyasi',$roles)) {
        $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $query = db_select('node__field_roles', 'fr');
        $query->fields('fr',['entity_id']);
        $query->condition('fr.bundle', 'home_pages');
        $query->condition('fr.field_roles_target_id', 'preceptor');
        $query->condition('fr.langcode', $language);
        $nid = $query->execute()->fetchField();
        $url = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
        return $url;
      } else {
        return 'default';
      }
    }
  }
    
}

/**
 * Utilty function for whether entity type to be restricted.
 */
function entity_type_role_matcher($entity_type) {
  $all_roles = array_keys(user_roles(TRUE));
  foreach ($all_roles as $role) {
    if (preg_match('/'.$role.'/',$entity_type)) {
      return $role;
    }
  }
  return FALSE;
}

/**
 * Utitlity function to redirect anonymous users to login url.
 */
function redirect_to_srcm_login_url() {
  $host = \Drupal::request()->getSchemeAndHttpHost();
  $config = \Drupal::config('srcm_custom.oauth2endpoint');
  $endpoint = $config->get('oauth2_end_point_url');
  $client_id = $config->get('oauth2_client_id');
  $url = $endpoint.'/o/authorize?state=test&response_type=code&client_id='.$client_id.'&redirect_uri='.$host.'/openid-connect/generic';
  $response = new RedirectResponse($url);
  $response->send();
  return;
}


function srcm_custom_user_logout($account){

                user_cookie_delete('first_name');
                user_cookie_delete('last_name');
                user_cookie_delete('user_email');
                drupal_flush_all_caches();      
				//return $this->redirect('https://heartfulness.org/en/'); 
				//return new RedirectResponse('https://heartfulness.org/en/');
				$url = "https://heartfulness.org/en/";
				$response = new RedirectResponse($url);
				$response->send();
				return;
} 